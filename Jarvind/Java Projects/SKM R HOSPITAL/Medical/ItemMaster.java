/*
 * ItemMaster.java
 *
 * Created on April 6, 2010, 7:23 PM
 */

//package medretail;
import java.rmi.*;
import javax.swing.*;
/**
 *
 * @author  Deep Pal
 */
public class ItemMaster extends javax.swing.JInternalFrame {
    /** Creates new form ItemMaster */
    public ItemMaster(javax.swing.JDesktopPane jDesktopPane1) {
        this.jDesktopPane1=jDesktopPane1;
        initComponents();
		
		//---updated here------------
		genericNm=new JComboBox();
		genericNm.setBounds(100, 85, 170, 20);
		getContentPane().add(genericNm);
		genericNm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                genericNmKeyPressed(evt);
            }
        });
        jButton12=new JButton(new ImageIcon("icons\\new.gif"));
        jButton12.setBounds(275, 85, 30, 20);
		getContentPane().add(jButton12);
		jButton12.setToolTipText("Add New Generic Name");
		jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jButton12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton12KeyPressed(evt);
            }
        });
        
		
		
        vc=new java.util.Vector();
        String itemnames[]=null;
        try
        {
        	ZedInterface inf=null;
ZedInterfaceForMedical inf1=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        	itemnames=inf1.getItemNames("");
        	String str[]=inf.getResultSetAs_1D_Array("select genericNm from medicine_GenericName order by genericNm");
        	if(str!=null)
        	{
        		for(int i=0;i<str.length;i++)
        		{
        			genericNm.addItem(str[i]);
        		}
        	}
        	
        }
        catch(Exception e)
        {
        	System.out.println("Error..."+e);
        }
        for(int i=1;i<itemnames.length;i++)
        {
            vc.addElement(itemnames[i]);
        }
        jList1.setListData(vc);
        
        
        java.awt.Cursor cursor;
        cursor = new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR);
        jButton1.setCursor(cursor);
        jButton2.setCursor(cursor);
        jButton3.setCursor(cursor);
        jButton4.setCursor(cursor);
        jList1.setCursor(cursor);
        
        reshape(20,20,780,320);
        jDesktopPane1.add(this);
        setVisible(true);
        
        jProgressBar1.setVisible(false);
        getCmpNames();
        
        setPkgAttributes();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmpNameCb = new javax.swing.JComboBox();
        itemTypeCb = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        pkgInBoxTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pkgInCaseTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pkgTf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        vatTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jProgressBar1 = new javax.swing.JProgressBar();

        getContentPane().setLayout(null);

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 102)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Item Master");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel1.setText("Enter New Item Name");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 118, 14);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        getContentPane().add(jTextField1);
        jTextField1.setBounds(170, 20, 170, 19);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.gif")));
        jButton1.setMnemonic('S');
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(10, 240, 100, 30);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit.gif")));
        jButton2.setMnemonic('U');
        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(120, 240, 130, 30);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.gif")));
        jButton3.setMnemonic('D');
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });

        getContentPane().add(jButton3);
        jButton3.setBounds(260, 240, 100, 30);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit.gif")));
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        getContentPane().add(jButton4);
        jButton4.setBounds(370, 240, 100, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel3.setText("Select Company Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 50, 123, 14);

        cmpNameCb.setMaximumRowCount(4);
        cmpNameCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpNameCbActionPerformed(evt);
            }
        });
        cmpNameCb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpNameCbKeyPressed(evt);
            }
        });

        getContentPane().add(cmpNameCb);
        cmpNameCb.setBounds(170, 50, 190, 22);

        itemTypeCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Capsule", "Drop", "Injection", "Pcs", "Syrup", "Tab", "Voil" }));
        itemTypeCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTypeCbActionPerformed(evt);
            }
        });
        itemTypeCb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemTypeCbKeyPressed(evt);
            }
        });

        getContentPane().add(itemTypeCb);
        itemTypeCb.setBounds(350, 20, 90, 22);

        jPanel1.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel4.setText("Packing In A Box");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 40, 120, 20);

        pkgInBoxTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pkgInBoxTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pkgInBoxTfActionPerformed(evt);
            }
        });
        pkgInBoxTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pkgInBoxTfFocusGained(evt);
            }
        });
        pkgInBoxTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pkgInBoxTfKeyPressed(evt);
            }
        });

        jPanel1.add(pkgInBoxTf);
        pkgInBoxTf.setBounds(170, 40, 50, 20);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel5.setText("Packing In A Case");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 70, 120, 20);

        pkgInCaseTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pkgInCaseTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pkgInCaseTfFocusGained(evt);
            }
        });
        pkgInCaseTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pkgInCaseTfKeyPressed(evt);
            }
        });

        jPanel1.add(pkgInCaseTf);
        pkgInCaseTf.setBounds(170, 70, 50, 20);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel6.setText("Injection");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(230, 40, 120, 20);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel7.setText("Box");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(230, 70, 120, 20);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel10.setText("Packing Of An Injection");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(10, 10, 150, 20);

        pkgTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pkgTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pkgTfFocusGained(evt);
            }
        });
        pkgTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pkgTfKeyPressed(evt);
            }
        });

        jPanel1.add(pkgTf);
        pkgTf.setBounds(170, 10, 50, 20);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel11.setText("ml");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(230, 10, 120, 20);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel12.setText("VAT (%)");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(10, 100, 120, 20);

        vatTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        vatTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vatTfFocusGained(evt);
            }
        });
        vatTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vatTfKeyPressed(evt);
            }
        });

        jPanel1.add(vatTf);
        vatTf.setBounds(170, 100, 50, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 110, 430, 120);

        
        JLabel jLabel118=new JLabel();
        jLabel118.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel118.setText("Generic Name");
        getContentPane().add(jLabel118);
        jLabel118.setBounds(10, 85, 120, 20);
        
        jLabel8.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel8.setText("M.R.P. ");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(310, 85, 100, 20);
        

        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });

        getContentPane().add(jTextField4);
        jTextField4.setBounds(380, 85, 90, 20);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel9.setText("Rs. ");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(360, 85, 30, 20);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.gif")));
        jButton5.setMnemonic('a');
        jButton5.setText("Add");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton5KeyPressed(evt);
            }
        });

        getContentPane().add(jButton5);
        jButton5.setBounds(370, 50, 100, 30);

        jPanel2.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel2.setText("Enter New Item Name");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(490, 20, 118, 14);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel13.setText("Existing Item List");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(90, 0, 95, 30);

        jList1.setToolTipText("select item to update/delete");
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 260, 220);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(480, 10, 280, 260);

        jProgressBar1.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(10, 280, 770, 10);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            jTextField1.requestFocus();
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void pkgInBoxTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pkgInBoxTfActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_pkgInBoxTfActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
            
            
        String cmpname=null;
        String mrp=null;                               // TODO add your handling code here:
        String itemname=""+vc.elementAt(jList1.getSelectedIndex());
        ZedInterface inf=null;
ZedInterfaceForMedical inf1=null;
        try
        {
        	
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        	cmpname=inf1.getCmpName(itemname);
        	mrp=inf1.getMrp(itemname);
        }
        catch(Exception e)
        {
        	System.out.println("Error..."+e);
        }
        oldCmpName=cmpname;
        oldItemName=itemname;
        
        jTextField1.setText(itemname);
        cmpNameCb.setSelectedItem(cmpname);
        jTextField4.setText(mrp);
        
        
        try
        {
        	itemTypeCb.setSelectedItem(inf1.getSmallestQtyType(itemname));
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            //java.sql.ResultSet rs=st.executeQuery("select * from itemMaster where itemName='"+itemname+"'");
            String arr[][]=inf.getResultSetAs_2D_Array("select genericNm,pkging,pkgBox,pkgCase,vat from itemMaster where itemName='"+itemname+"'",5);
            if(arr!=null)
            {
            	genericNm.setSelectedItem(arr[0][0]);
                pkgTf.setText(arr[0][1]);
                pkgInBoxTf.setText(arr[0][2]);
                pkgInCaseTf.setText(arr[0][3]);
                vatTf.setText(arr[0][4]);
            }
            
        }
        catch(Exception ex)
        {
            System.out.println("Error...10..."+ex);
        }
         
        //jList1.requestFocus();
        //jList1.setSelectedIndex(jList1.getSelectedIndex());
        
    }//GEN-LAST:event_jList1MouseClicked

    private void cmpNameCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpNameCbActionPerformed
// TODO add your handling code here:
        //utilityClass uc=new utilityClass();
        try
        {
        
        ZedInterface inf=null;
ZedInterfaceForMedical inf1=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        String itemnames[]=null;//=
        /*if(cmpNameCb.getSelectedItem().toString().equalsIgnoreCase("NA"))
        {
            itemnames=uc.getItemNames("");
        }
        else
        {*/
            itemnames=inf1.getItemNamesOld(""+cmpNameCb.getSelectedItem());
        //}
        vc.removeAllElements();
        for(int i=1;i<itemnames.length;i++)
        {
            System.out.println(itemnames[i]);
            vc.addElement(itemnames[i]);
        }
        jList1.setListData(vc);
        }
        catch(Exception e)
        {
        	System.out.println("Error...111.."+e);
        }
    }//GEN-LAST:event_cmpNameCbActionPerformed

    private void vatTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vatTfKeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
            jButton1.requestFocus();
    }//GEN-LAST:event_vatTfKeyPressed

    private void vatTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vatTfFocusGained
// TODO add your handling code here:
        vatTf.selectAll();
    }//GEN-LAST:event_vatTfFocusGained

    private void jButton5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton5KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            CmpMaster cmpMaster=new CmpMaster(jDesktopPane1);
        }
    }//GEN-LAST:event_jButton5KeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
        CmpMaster cmpMaster=new CmpMaster(jDesktopPane1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
// TODO add your handling code here:
        getCmpNames();
    }//GEN-LAST:event_formInternalFrameActivated

    private void pkgInCaseTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pkgInCaseTfFocusGained
// TODO add your handling code here:
        pkgInCaseTf.selectAll();
    }//GEN-LAST:event_pkgInCaseTfFocusGained

    private void pkgInBoxTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pkgInBoxTfFocusGained
// TODO add your handling code here:
        pkgInBoxTf.selectAll();
    }//GEN-LAST:event_pkgInBoxTfFocusGained

    private void pkgTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pkgTfFocusGained
// TODO add your handling code here:
        pkgTf.selectAll();
    }//GEN-LAST:event_pkgTfFocusGained

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusGained
// TODO add your handling code here:
        jTextField4.selectAll();
    }//GEN-LAST:event_jTextField4FocusGained

    private void cmpNameCbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpNameCbKeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            genericNm.requestFocus();
        }
        
    }//GEN-LAST:event_cmpNameCbKeyPressed

    private void itemTypeCbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemTypeCbKeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            cmpNameCb.requestFocus();
        }
    }//GEN-LAST:event_itemTypeCbKeyPressed

    private void pkgTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pkgTfKeyPressed
// TODO add your handling code here:
                if(evt.getKeyCode()==10)
        {
            pkgInBoxTf.requestFocus();
        }

    }//GEN-LAST:event_pkgTfKeyPressed

    private void itemTypeCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTypeCbActionPerformed
// TODO add your handling code here:`
        setPkgAttributes();
    }//GEN-LAST:event_itemTypeCbActionPerformed

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
// TODO add your handling code here:        
        if(evt.getKeyCode()==10)
        {
            pkgTf.requestFocus();
        }

    }//GEN-LAST:event_jTextField4KeyPressed

    private void pkgInCaseTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pkgInCaseTfKeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            vatTf.requestFocus();
        }

    }//GEN-LAST:event_pkgInCaseTfKeyPressed

    private void setPkgAttributes()
    {
        if(itemTypeCb.getSelectedItem().toString().equals("Injection"))
        {
            jLabel6.setText("Injection");
            jLabel10.setText("Packing Of An Injection");
            jLabel11.setText("ml");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Drop"))
        {
            jLabel6.setText("Ph");
            jLabel10.setText("Packing Of A Drop");
            jLabel11.setText("ml");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Syrup"))
        {
            jLabel6.setText("Ph");
            jLabel10.setText("Packing Of A Syrup");
            jLabel11.setText("ml");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Tab"))
        {
            jLabel6.setText("St");
            jLabel10.setText("Packing Of A Strip");
            jLabel11.setText("Tab");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Capsule"))
        {
            jLabel6.setText("St");
            jLabel10.setText("Packing Of A Strip");
            jLabel11.setText("Cap");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Voil"))
        {
            jLabel6.setText("Voil");
            jLabel10.setText("Packing Of An Voil");
            jLabel11.setText("mg");   
        }
        else if(itemTypeCb.getSelectedItem().toString().equals("Pcs"))
        {
            jLabel6.setText("Pcs");
            jLabel10.setText("Packing Of An Pcs");
            jLabel11.setText("");   
        }
                
    }
    
    private void getCmpNames()
    {
        try
        {
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            //java.sql.ResultSet rs=st.executeQuery("select cmpName from cmpMaster order by cmpName");
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String arr[]=inf.getResultSetAs_1D_Array("select cmpName from cmpMaster order by cmpName");
            cmpNameCb.removeAllItems();
            //cmpNameCb.addItem("NA");
            for(int i=0;i<arr.length;i++)
            {
                cmpNameCb.addItem(arr[i]);
            }
            
        }
        catch(Exception ex)
        {
            System.out.println("Error...10..."+ex);
        }
    }
private void pkgInBoxTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pkgInBoxTfKeyPressed
// TODO add your handling code here:
            if(evt.getKeyCode()==10)
        {
            pkgInCaseTf.requestFocus();
        }

}//GEN-LAST:event_pkgInBoxTfKeyPressed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
// TODO add your handling code here:
        if(evt.getSource()==jButton4 && evt.getKeyCode()==10) {
            this.dispose();
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        if(evt.getSource()==jButton4) {
            this.dispose();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            deleteItem();
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        deleteItem();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            updateItem();
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
System.out.println("performining  updation");
        updateItem();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10) {
           saveItem();
        }
    }//GEN-LAST:event_jButton1KeyPressed
	private void jButton12KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10) {
           addGeneric();
        }
    }
	private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        addGeneric();
   
    }
    private boolean addGeneric()
    {
    	try
    	{
    		String genNm=JOptionPane.showInputDialog(null,"Enter Generic Name ");
    		if(genNm!=null && !(genNm.trim().equals("")))
    		{
    			ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
    			inf.executeUpdateQuery("insert into medicine_GenericName values('"+genNm+"')");
    			javax.swing.JOptionPane.showMessageDialog(null,"Congratulation!\nNew Generic Name created successfully.");
    			genericNm.addItem(genNm);
    			genericNm.setSelectedItem(genNm);
    			jTextField4.requestFocus();
    		}
    	}
    	catch(Exception e)
    	{
    		System.out.println("Erro..."+e);
    	}
    	return true;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        saveItem();
   
    }//GEN-LAST:event_jButton1ActionPerformed
    private int saveItem()
    {
        if(validation()==false)
            return 1;
        if(cmpNameCb.getSelectedItem()==null)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nNo company found\n First create company.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            cmpNameCb.requestFocus();
            return 1;
        }
        if(genericNm.getSelectedItem()==null)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nNo generic name found\n First create generic name.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            genericNm.requestFocus();
            return 1;
        }
        try
        {
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            //java.sql.ResultSet rs=st.executeQuery("select max(itemCode) from itemMaster");
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            int itemCode=inf.getMaxValue("select max(itemCode) from itemMaster");
            itemCode+=1;
            //get company code
            String cmpc=inf.getSingleValue("select cmpCode from cmpMaster where cmpName='"+cmpNameCb.getSelectedItem().toString()+"'");
            int cmpcode=Integer.parseInt(cmpc);
            /*rs=st.executeQuery("select cmpCode from cmpMaster where cmpName='"+cmpNameCb.getSelectedItem().toString()+"'");
            if(rs.next()==true)
            {
                cmpcode=rs.getInt(1);
            }*/
            
            //end code
            String pkg1=pkgTf.getText();
            String pkg2=pkgInBoxTf.getText();
            String pkg3=pkgInCaseTf.getText();
            if(pkg3.equals(""))  pkg3="0";
            double vat=Double.valueOf(vatTf.getText());
            //String s="insert into itemMaster values("+cmpcode+",'"+jTextField1.getText().trim().toUpperCase()+"',"+itemCode+",'"+itemTypeCb.getSelectedItem().toString()+"','"+jLabel11.getText().toString()+"',"+Double.valueOf(jTextField4.getText())+",'"+pkg1+"','"+pkg2+"','"+pkg3+"',"+vat+")";
            //javax.swing.JOptionPane.showMessageDialog(null,s);
            inf.executeUpdateQuery("insert into itemMaster values("+cmpcode+",'"+""+genericNm.getSelectedItem()+"','"+jTextField1.getText().trim().toUpperCase()+"',"+itemCode+",'"+itemTypeCb.getSelectedItem().toString()+"',"+Double.valueOf(jTextField4.getText())+",'"+pkg1+"','"+jLabel11.getText().toString()+"','"+pkg2+"','"+pkg3+"',"+vat+")");
            //st.executeUpdate("insert into itemMaster values("+cmpcode+",'"+jTextField1.getText().trim().toUpperCase()+"',"+itemCode+",'"+itemTypeCb.getSelectedItem().toString()+"',"+Double.valueOf(jTextField4.getText())+",'"+pkg1+"','"+jLabel11.getText().toString()+"','"+pkg2+"','"+pkg3+"',"+vat+")");

            javax.swing.JOptionPane.showMessageDialog(null,"Congratulation!\nNew Item created successfully.");
            jTextField1.setText("");
            jTextField1.requestFocus();
            //connection.close();
            
            forProgressbar fp=new forProgressbar();
            fp.start();
        }
        catch(Exception ex)
        {
            System.out.println("Error...1..."+ex);
        }          
        return 0;
    }
    private boolean validation()
    {
    //	System.out.println("inside validation");
        if(jTextField1.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter item name.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
            return false;
        }
        if(jTextField4.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter M.R.P. of item.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jTextField4.requestFocus();
            return false;
        }
            try
            {
                Double.valueOf(jTextField4.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  M.R.P. found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                jTextField4.requestFocus();
                return false;                
            }
        if(pkgTf.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter strip of item.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            pkgTf.requestFocus();
            return false;
        }
        try
            {
                Integer.parseInt(pkgTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  Strip found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgTf.requestFocus();
                return false;                
            }
         try
            {
                if(pkgInBoxTf.getText().trim().equals(""))
                {
                    pkgInBoxTf.setText("1");
                }
               Integer.parseInt(pkgInBoxTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  pack in box found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgInBoxTf.requestFocus();
                return false;                
            }
        try
            {
                if(pkgInCaseTf.getText().trim().equals(""))
                {
                    pkgInCaseTf.setText("0");
                }
               Integer.parseInt(pkgInCaseTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  case in box found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgInCaseTf.requestFocus();
                return false;                
            }
        
            try
            {
                if(vatTf.getText().trim().equals(""))
                {
                    vatTf.setText("0");
                }
                Double.valueOf(vatTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  VAT found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                vatTf.requestFocus();
                return false;                
            }

        try
        {
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            //java.sql.ResultSet rs=st.executeQuery("select * from itemMaster where itemName='"+jTextField1.getText().trim()+"'");
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String itm=inf.getSingleValue("select * from itemMaster where itemName='"+jTextField1.getText().trim()+"'");
            if(itm!=null)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEntered item name already exist.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                //connection.close();
                jTextField1.requestFocus();
                jTextField1.selectAll();
                return false;                
            }   
        }
        catch(Exception ex)
        {
            System.out.println("Error...2..."+ex);
        }

        return true;
    }
    private boolean validation1()
    {
    //	System.out.println("inside validation1");
        if(jTextField1.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter item name.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
            return false;
        }
        if(jTextField4.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter M.R.P. of item.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jTextField4.requestFocus();
            return false;
        }
            try
            {
                Double.valueOf(jTextField4.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  M.R.P. found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                jTextField4.requestFocus();
                return false;                
            }
        if(pkgTf.getText().trim().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nEnter strip of item.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            pkgTf.requestFocus();
            return false;
        }
        try
            {
                Integer.parseInt(pkgTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  Strip found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgTf.requestFocus();
                return false;                
            }
           try
            {
                if(pkgInBoxTf.getText().trim().equals(""))
                {
                    pkgInBoxTf.setText("1");
                }
               Integer.parseInt(pkgInBoxTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  pack in box found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgInBoxTf.requestFocus();
                return false;                
            }
        try
            {
                if(pkgInCaseTf.getText().trim().equals(""))
                {
                    pkgInCaseTf.setText("0");
                }
               Integer.parseInt(pkgInCaseTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  case in box found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                pkgInCaseTf.requestFocus();
                return false;                
            }
            try
            {
                if(vatTf.getText().trim().equals(""))
                {
                    vatTf.setText("0");
                }
                Double.valueOf(vatTf.getText().trim());
            }
            catch(Exception ex)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Error!\nInvalid  VAT found.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                vatTf.requestFocus();
                return false;                
            }

        return true;
    }
    
    private int updateItem()
    {
       // if(validation1()==false)
        //    return 1;
        if(validation()==false)
            return 1;
        if(cmpNameCb.getSelectedItem()==null)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nNo company found\n First create company.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            cmpNameCb.requestFocus();
            return 1;
        }
        /////////updated here by S_CHK//////////
       /* if(jList1.getSelectedIndex()==-1)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nPlease select any item to update.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jList1.requestFocus();
            jList1.setSelectedIndex(0);
            return 1;
        }*/
        int response=javax.swing.JOptionPane.showConfirmDialog(this,"Do you want to update?","Confirmation?",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
        if(response==javax.swing.JOptionPane.YES_OPTION)
        {
            try
        
        {
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            //utilityClass uc=new utilityClass();
            ZedInterface inf=null;
ZedInterfaceForMedical inf1=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            int itemCode=inf1.getItemCode(oldItemName);
            
            //java.sql.ResultSet rs;  //=st.executeQuery("select max(itemCode) from itemMaster");
            /*int itemCode=1;
            if(rs.next()==true)
            {
                String code=rs.getString(1);
                if(code!=null)
                {
                    itemCode=Integer.parseInt(code)+1;
                }
            }*/
            
            //get company code
            String cmpc=inf.getSingleValue("select cmpCode from cmpMaster where cmpName='"+cmpNameCb.getSelectedItem().toString()+"'");
            int cmpcode=Integer.parseInt(cmpc);
            /*rs=st.executeQuery("select cmpCode from cmpMaster where cmpName='"+cmpNameCb.getSelectedItem().toString()+"'");
            if(rs.next()==true)
            {
                cmpcode=rs.getInt(1);
            }*/
            
            //end code
            String pkg1=pkgTf.getText();
            String pkg2=pkgInBoxTf.getText();
            String pkg3=pkgInCaseTf.getText();
            if(pkg3.equals(""))  pkg3="0";
            double vat=Double.valueOf(vatTf.getText());
            //String s="insert into itemMaster values("+cmpcode+",'"+jTextField1.getText().trim().toUpperCase()+"',"+itemCode+",'"+itemTypeCb.getSelectedItem().toString()+"','"+jLabel11.getText().toString()+"',"+Double.valueOf(jTextField4.getText())+",'"+pkg1+"','"+pkg2+"','"+pkg3+"',"+vat+")";
            //javax.swing.JOptionPane.showMessageDialog(null,s);
            inf.executeUpdateQuery("delete * from itemMaster where itemName='"+oldItemName+"'");
            inf.executeUpdateQuery("insert into itemMaster values("+cmpcode+",'"+""+genericNm.getSelectedItem()+"','"+jTextField1.getText().trim().toUpperCase()+"',"+itemCode+",'"+itemTypeCb.getSelectedItem().toString()+"',"+Double.valueOf(jTextField4.getText())+",'"+pkg1+"','"+jLabel11.getText().toString()+"','"+pkg2+"','"+pkg3+"',"+vat+")");
            inf.executeUpdateQuery("update purchaseDtl set coNm='"+cmpNameCb.getSelectedItem().toString()+"' where coNm='"+oldCmpName+"'");
            inf.executeUpdateQuery("update purchaseDtl set itemNm='"+jTextField1.getText().trim().toUpperCase()+"' where itemNm='"+oldItemName+"'");
            inf.executeUpdateQuery("update saleDtl set coNm='"+cmpNameCb.getSelectedItem().toString()+"' where coNm='"+oldCmpName+"'");
            inf.executeUpdateQuery("update saleDtl set itemNm='"+jTextField1.getText().trim().toUpperCase()+"' where itemNm='"+oldItemName+"'");
            
            javax.swing.JOptionPane.showMessageDialog(null,"Congratulation!\nItem updated successfully.");
            jTextField1.setText("");
            jTextField1.requestFocus();
            
            
            forProgressbar fp=new forProgressbar();
            fp.start();
        }
        catch(Exception ex)
        {
            System.out.println("Error...1..."+ex);
        }
        }    
        return 0;
    }
    
    private boolean deleteItem()
    {
       /* if(jList1.getSelectedIndex()==-1)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error!\nPlease select any item to update.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            jList1.requestFocus();
            jList1.setSelectedIndex(0);
            return false;
        }*/
        int response=javax.swing.JOptionPane.showConfirmDialog(this,"Do you want to delete?","Confirmation?",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
        if(response==javax.swing.JOptionPane.YES_OPTION)
        {
            try
        
            {
            //ConnectDatabase cd=new ConnectDatabase();
            //java.sql.Connection connection=cd.getConnection();
            //java.sql.Statement st=connection.createStatement();
            ZedInterface inf=null;
ZedInterfaceForMedical inf1=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		inf1=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            //utilityClass uc=new utilityClass();
            int itemCode=inf1.getItemCode(oldItemName);
            inf.executeUpdateQuery("delete * from itemMaster where itemName='"+oldItemName+"'");
            inf.executeUpdateQuery("delete * from stockHolding where itemCode="+itemCode+"");
                        
            javax.swing.JOptionPane.showMessageDialog(null,"Congratulation!\nItem deleted successfully.");
            jTextField1.setText("");
            jTextField1.requestFocus();
            
            forProgressbar fp=new forProgressbar();
            fp.start();
            }
        catch(Exception ex)
        {
            System.out.println("Error...123..."+ex);
        }
        }
        return true;
    }
    
    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10) {
            itemTypeCb.requestFocus();
        }
    }//GEN-LAST:event_jTextField1KeyPressed
    
    private void genericNmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10) {
            jTextField4.requestFocus();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmpNameCb;
    private javax.swing.JComboBox itemTypeCb;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField pkgInBoxTf;
    private javax.swing.JTextField pkgInCaseTf;
    private javax.swing.JTextField pkgTf;
    private javax.swing.JTextField vatTf;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    java.util.Vector vc;
    String oldCmpName,oldItemName;
    JComboBox genericNm;
    JButton jButton12;
    
    class forProgressbar extends Thread
    {
        public void run()
        {
            try
            {
                jProgressBar1.setVisible(true);
                for(int i=1;i<=100;i++)
                {
                    jProgressBar1.setValue(i);
                    Thread.sleep(10);
                }
                jProgressBar1.setVisible(false);
                getCmpNames();
            }
            catch(Exception ex)
            {
                System.out.println("Error no. 929..."+ex);
            }
        }
    }
}
