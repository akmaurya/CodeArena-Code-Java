/*
 * StockReport.java
 *
 * Created on May 6, 2010, 8:28 PM
 */

//package medretail;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.*;
import java.sql.*;
import javax.print.PrintService;
import java.awt.print.*;
import javax.print.attribute.*;
import java.awt.geom.*;
import java.io.*;
import java.awt.font.*;
import java.rmi.*;
/**
 *
 * @author  Deep Pal
 */
public class OutStockReport extends javax.swing.JInternalFrame {
    
    /** Creates new form StockReport */
    public OutStockReport(javax.swing.JDesktopPane jDesktopPane1) {
        initComponents();
        this.dp=jDesktopPane1;
        //utilityClass uc=new utilityClass();
        try
        {
        ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        String coNm[]=uc.getCmpNames();
        jComboBox1.addItem("All");
        for(int i=1;i<coNm.length;i++)
        {
            jComboBox1.addItem(coNm[i]);
        }
        
        String heading[]={"S.No.","Company Name","Item Name"};
        dtm1=new javax.swing.table.DefaultTableModel(heading,0);
        jTable1.setModel(dtm1);
                javax.swing.table.DefaultTableCellRenderer CRLeft = new javax.swing.table.DefaultTableCellRenderer();
       		javax.swing.table.DefaultTableCellRenderer CRRight = new javax.swing.table.DefaultTableCellRenderer();
       		javax.swing.table.DefaultTableCellRenderer CRCenter = new javax.swing.table.DefaultTableCellRenderer();
      		CRLeft.setHorizontalAlignment(javax.swing.JLabel.LEFT);
	       	CRRight.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
       		CRCenter.setHorizontalAlignment(javax.swing.JLabel.CENTER);
      		javax.swing.table.TableColumn column;

      		column=jTable1.getColumn("S.No.");
      		column.setCellRenderer(CRRight);
       		column.setPreferredWidth(30);

      		column=jTable1.getColumn("Company Name");
      		column.setCellRenderer(CRLeft);
       		column.setPreferredWidth(200);

      		column=jTable1.getColumn("Item Name");
      		column.setCellRenderer(CRLeft);
       		column.setPreferredWidth(200);

      		tab1=jTable1;
         }
         catch(Exception ex)
		{
     		System.out.println("Error ...."+ex);
		}       
        java.awt.Dimension dm=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        reshape((dm.width-800)/2,(dm.height-600)/2,800,500);
        jDesktopPane1.add(this);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setMnemonic('m');
        jMenuItem1.setText("MakeOrder");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem1);

        getContentPane().setLayout(null);

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("REPORT : Display Out Of Stocks");
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No.", "Company Name", "Item Name", "Quantity", "Batch No.", "Exp. Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 50, 760, 360);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11));
        jLabel1.setText("Select company name ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 10, 270, 20);

        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(150, 10, 470, 22);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.gif")));
        jButton1.setMnemonic('s');
        jButton1.setText("Show Stock");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(630, 10, 150, 30);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PRINT.GIF")));
        jButton2.setMnemonic('p');
        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(390, 423, 190, 30);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit.gif")));
        jButton3.setMnemonic('c');
        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton3);
        jButton3.setBounds(590, 423, 190, 30);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/attachment.gif")));
        jButton4.setMnemonic('o');
        jButton4.setText("Make All Order");
        jButton4.setToolTipText("Make List Of Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        getContentPane().add(jButton4);
        jButton4.setBounds(190, 423, 170, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            if(tab1.getRowCount()>0)
			{
				printchallan obj=new printchallan(dp);	
			}
			else
			{
				JOptionPane.showMessageDialog(null,"No out of stock found to print?","PrintError",JOptionPane.ERROR_MESSAGE);
			}
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        if(tab1.getRowCount()>0)
			{
				printchallan obj=new printchallan(dp);	
			}
			else
			{
				JOptionPane.showMessageDialog(null,"No out of stock found to print?","PrintError",JOptionPane.ERROR_MESSAGE);
			}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            if(jTable1.getRowCount()>0)
            {
                makeAllOrder();
            }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this,"No item found to make order");
            }
        }    
    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        if(jTable1.getRowCount()>0)
            {
                makeAllOrder();
            }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(this,"No item found to make order");
            }
    }//GEN-LAST:event_jButton4ActionPerformed
    private void makeAllOrder()
    {
        itemList=new String[jTable1.getRowCount()];
            releasingItemIndex=new int[itemList.length];
            for(int i=0;i<jTable1.getRowCount();i++)
            {
                itemList[i]=""+jTable1.getValueAt(i,2);
                releasingItemIndex[i]=0;
            }
        //utilityClass ut=new utilityClass();
        int orderNo=0;
        try
        {
        	ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        	String query="select max(oNo) from orderSmry";
        	orderNo=uc.getMaxValue(query);
        	orderNo+=1;
		}
        catch(Exception ex)
		{
     		System.out.println("Error ...."+ex);
		}
        
        int tempOrderNo=orderNo;
        java.awt.Dimension dm=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int getX=790;
        int getY=550;
        for(int i=0;i<jTable1.getRowCount();i++)
        {
            mainItem=""+jTable1.getValueAt(i,2);
            checkItem(mainItem);
            if(check1)
            {
                check1=false;
                
                int x=(dm.width-getX)/2;
                int y=(dm.height-getY)/2;
                if(releasingItemIndex[i]==0)
                {    
                    MakeOrderByStockOut frm= new MakeOrderByStockOut(dp,x,y,mainItem,itemList,tempOrderNo++);
                    getX=getX-10;
                    getY=getY-50;
                }
            }
            else
               // continue;
            releasingItemIndex[i]=0;
        }
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
// TODO add your handling code here:
        itemList=new String[jTable1.getRowCount()];
            releasingItemIndex=new int[itemList.length];
            for(int i=0;i<jTable1.getRowCount();i++)
            {
                itemList[i]=""+jTable1.getValueAt(i,2);
                releasingItemIndex[i]=0;
            }
            int orderNo=0;
        //utilityClass ut=new utilityClass();
        try
        {
        	ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
        	String query="select max(oNo) from orderSmry";
        	orderNo=inf.getMaxValue(query);
        	orderNo+=1;
		}
        catch(Exception ex)
		{
     		System.out.println("Error ...."+ex);
		}
        
         int row=jTable1.getSelectedRow();
         mainItem=""+jTable1.getValueAt(row,2);
         checkItem(mainItem);
         if(check1)
         {
             check1=false;
             java.awt.Dimension dm=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
             int x=(dm.width-790)/2;
             int y=(dm.height-550)/2;
             MakeOrderByStockOut frm= new MakeOrderByStockOut(dp,x,y,mainItem,itemList,orderNo);
             for(int i=0;i<itemList.length;i++)
             {
                 releasingItemIndex[i]=0;
             }    
             mainItem="";
         }
         else
         {
             javax.swing.JOptionPane.showMessageDialog(this,"This item is not purchased.","Warning !",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed
private void checkItem(String item)
    {
        try
        {
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();*/
            //for(int i=0;i<itemList.length;i++)
            {
                String query="select pNo from purchaseDtl where itemNm='"+item+"' order by pNo desc";
                checkInfo1(query);
            }
            //connection.close();
        }   
        catch(Exception e)
        {
            System.out.println("Error in checkItem method in OutStockReport class..."+e);
        }
    }
    private void checkInfo1(String query)
    {
        try
        {
            boolean flag=false;
            int pNo=0;
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();
            java.sql.ResultSet rs=st.executeQuery(query);*/
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String pno=inf.getSingleValue(query);
            if(pno!=null)
            {
                check1=true;
                pNo=Integer.parseInt(pno);
                query="select partyNm from purchaseSmry where pNo="+pNo;
                takingParty(query);
                query="select pNo from purchaseSmry where partyNm='"+party+"'";
                choosingItemWithParty(query);
                //query="select *from purchaseDtl where pNo="+pNo;
                //checkItemByOneParty(query);
                /*for(int i=0;i<itemList.length;i++)//pending...............
                {
                    query="select *from purchaseDtl where itemNm='"+itemList[i]+"' and pNo>"+purchaseNo+"order by pNo desc";
                    checkItemWithMaxPNO(query);//pending.......
                }*/
            }
            //connection.close();
        }   
        catch(Exception e)
        {
            System.out.println("Error in checkInfo1 method in OutStockReport class..."+e);
        }
    }
    private void choosingItemWithParty(String query)
    {
        try
        {
            boolean flag=false;
            int pNo=0;
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();
            java.sql.ResultSet rs=st.executeQuery(query);*/
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String pno[]=inf.getResultSetAs_1D_Array(query);
            int i=0;
            if(pno!=null)
            while(i<pno.length)
            {
                pNo=Integer.parseInt(pno[i++]);
                query="select pNo,coNm,itemNm from purchaseDtl where pNo="+pNo+"  order by pNo desc";
                takingListOfItem(query);
                
            }
            //connection.close();
        }   
        catch(Exception e)
        {
            System.out.println("Error in choosingItemWithParty method in OutStockReport class..."+e);
        }
    }
    private void takingListOfItem(String query)
    {
        try
        {
            int pNo=0;
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();
            java.sql.ResultSet rs=st.executeQuery(query);*/
           // int len=itemList.length;
           ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String rs[][]=inf.getResultSetAs_2D_Array(query,3);
            if(rs!=null)
            for(int i1=0;i1<rs.length;i1++)
            {
                String company="",item="";
                pNo=Integer.parseInt(rs[i1][0]);
                company=rs[i1][1];
                item=rs[i1][2];
                for(int i=0;i<itemList.length;i++)
                {
                    if((itemList[i].equals(item)) && (!mainItem.equals(item)))
                    {
                        query="select pNo from purchaseDtl where pNo>"+pNo+" and itemNm='"+item+"'";//u
                        boolean checkLastParty=checkItemWithMaxPNO(query);//u
                        if(checkLastParty)//u
                        releasingItemIndex[i]=1;
                    }
                }
            }
            //connection.close();
            checkForLastParty=true;
        }   
        catch(Exception e)
        {
            System.out.println("Error in takingListOfItem method in MakeOrderByStockOut class..."+e);
        }
    }
    private void takingParty(String query)
    {
        try
        {
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();
            java.sql.ResultSet rs=st.executeQuery(query);
            
            if(rs.next())
            {
                party=rs.getString("partyNm");
            }
            connection.close();*/
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            party=inf.getSingleValue(query);
        }   
        catch(Exception e)
        {
            System.out.println("Error in showInitialInfo2 method in MakeOrderByStockOut class..."+e);
        }
    }
    private boolean checkItemWithMaxPNO(String query)//pending...
    {
        boolean flag=true;
        try
        {
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection = cd.getConnection();
            java.sql.Statement st=connection.createStatement();
            
            java.sql.ResultSet rs=st.executeQuery(query);*/
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String rs=inf.getSingleValue(query);
            if(rs!=null)
            {
               flag=false;
            }
            //connection.close();
        }   
        catch(Exception e)
        {
            System.out.println("Error in checkInfo1 method in OutStockReport class..."+e);
        }
        return flag;
    }
   
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
// TODO add your handling code here:
        if(evt.getModifiers()==4)
        {
            int r=jTable1.getSelectedRow();
            if(r>=0)
            {
                jMenuItem1.setEnabled(true);
                
            }
            else
            {
                jMenuItem1.setEnabled(false);
                       
            }
            jPopupMenu1.show(jTable1,evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
            showdata();
    }//GEN-LAST:event_jButton1KeyPressed

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
// TODO add your handling code here:
        if(evt.getKeyCode()==10)
            jButton1.requestFocus();
    }//GEN-LAST:event_jComboBox1KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        showdata();
    }//GEN-LAST:event_jButton1ActionPerformed
    
 private void showdata()
 {
        try
        {
            while(dtm1.getRowCount()>0)
                dtm1.removeRow(0);
            
            /*ConnectDatabase cd=new ConnectDatabase();
            java.sql.Connection connection=cd.getConnection();
            java.sql.Statement st=connection.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY);
            java.sql.Statement st1=connection.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY);
            java.sql.Statement st2=connection.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,java.sql.ResultSet.CONCUR_READ_ONLY);*/
            String sqlQry="select cmpName,cmpCode from cmpMaster order by cmpName"; 
            if(jComboBox1.getSelectedIndex()>0)
            {
                sqlQry="select cmpName,cmpCode from cmpMaster where cmpName='"+jComboBox1.getSelectedItem()+"'";
            }
            //java.sql.ResultSet rs=st.executeQuery(sqlQry);
            ZedInterface inf=null;
ZedInterfaceForMedical uc=null;
try
{
	inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
	uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
}
catch(Exception e)
{
	System.out.println("Error with connection with server "+getIPaddress.IP()+" ...");
	getIPaddress.changeIP();
	try
	{
		inf=(ZedInterface)Naming.lookup(getIPaddress.IP());
		uc=(ZedInterfaceForMedical)Naming.lookup(getIPaddress.IP());
	}
	catch(Exception ex)
	{
		System.out.println("Error with connection with server  rmi://127.0.0.1/ExtendZedServer...");
	}
}
            String[][] rs=inf.getResultSetAs_2D_Array(sqlQry,2);
            String coName="",itmName="";
            if(rs!=null)
            for(int ii=0;ii<rs.length;ii++)
            {
                coName=rs[ii][0];
                sqlQry="select itemName,itemCode from itemMaster where cmpCode="+rs[ii][1]+" order by itemName";
                //java.sql.ResultSet rs1=st1.executeQuery(sqlQry);
                String[][] rs1=inf.getResultSetAs_2D_Array(sqlQry,2);
                if(rs1!=null)
            	for(int iii=0;iii<rs1.length;iii++)
                {
                    itmName=rs1[iii][0];
                    int iCode=Integer.parseInt(rs1[iii][1]);
                    sqlQry="select itemCode from stockHolding where (itemCode="+iCode+" and qty<=0)";
                    //java.sql.ResultSet rs2=st2.executeQuery(sqlQry);
                    String[] rs2=inf.getResultSetAs_1D_Array(sqlQry);
                    int ij=0;
                    if(rs2!=null)
                    while(ij++<rs2.length)
                    {
                        String arr[]=new String[3];
                        arr[0]=""+(dtm1.getRowCount()+1)+". ";
                        arr[1]=coName;
                        arr[2]=itmName;
                        
                        dtm1.addRow(arr);
                    }
                    sqlQry="select itemCode from stockHolding where itemCode="+iCode+"";
                    //rs2=st2.executeQuery(sqlQry);
                    String rss=inf.getSingleValue(sqlQry);
                    if(rss==null)
                    {
                        String arr[]=new String[3];
                        arr[0]=""+(dtm1.getRowCount()+1)+". ";
                        arr[1]=coName;
                        arr[2]=itmName;
                        
                        dtm1.addRow(arr);
                    }
                }
            }
            itemList=new String[jTable1.getRowCount()];
            releasingItemIndex=new int[itemList.length];
            for(int i=0;i<jTable1.getRowCount();i++)
            {
                itemList[i]=""+jTable1.getValueAt(i,2);
                releasingItemIndex[i]=0;
            }
            
            //connection.close();
         }
        catch(Exception ex)
        {
            System.out.println("Error...45234..."+ex);
        }    
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
     javax.swing.table.DefaultTableModel dtm1;
     javax.swing.JDesktopPane dp;
     String itemList[];
     String party;
     boolean check1=false;
     String mainItem;
     String purchaseNo;
     boolean checkForLastParty=true;
     int releasingItemIndex[];//which item don't make order
     JTable tab1;
     
     int currentpg,totalpg, rem;
	boolean firsttime=false;
	boolean complete=false;
	int currentrec=0;
	boolean cmp1=false;
	boolean cmp2[]=new boolean[33];
	boolean cmp3=false;
	boolean cmp4=false;
	boolean cmp5=false;
	boolean cmp6=false;
	int startno=0,endno=0;
		
	class printchallan extends JFrame 
	{
        	JInternalFrame pchallanf;
	        Container contentPane;
        	GridBagLayout gbl;
	        GridBagConstraints gbc;
        	JButton printButton;
	        JButton pageSetupButton,exitButton;

			PrintPanel canvas;
	        PageFormat pageFormat;

        	public printchallan(JDesktopPane desk)
        	{
                pchallanf=new JInternalFrame("Printing of Invoice",false,true,true,true);
                contentPane=pchallanf.getContentPane();
				gbl=new GridBagLayout();
				gbc=new GridBagConstraints();
                contentPane.setLayout(new BorderLayout());

                addWindowListener(new WindowAdapter()
                {
                        public void windowClosing(WindowEvent e)
                        {
                                System.exit(0);
                        }
                }
                );

                canvas=new PrintPanel();
                contentPane.add(canvas,"Center");
                JPanel buttonPanel = new JPanel();
                buttonPanel.setLayout(new GridLayout(2,1));

                //pageSetupButton.addActionListener(this);

                contentPane.add(buttonPanel,"East");

                                PrinterJob printJob=PrinterJob.getPrinterJob();
                                double width=8.27 * 72;
                                double height=(11.69 * 72);
                                Paper paper=new Paper();                                
                                paper.setSize(width,height);

                                PageFormat page=new PageFormat();
                                paper.setImageableArea(5,10,paper.getWidth(),paper.getHeight());
                                //page.setOrientation(PageFormat.LANDSCAPE);
                                page.setPaper(paper);
                                pageFormat=printJob.defaultPage(page);
                                pageFormat.setPaper(paper);
                                printJob.setPrintable(canvas,pageFormat);
								
                                try
                                {
                          				/*PrintRequestAttributeSet atrb=new HashPrintRequestAttributeSet();
                          				Attribute[] ar=atrb.toArray();
                          				//.out.println("length="+atrb.getName());
                          				PrintService[] pj = PrinterJob.lookupPrintServices();
                          				for(int i=0;i<pj.length;i++)
                          				{
                          					System.out.println(""+i+":-"+pj[i]);
                          				}
										
										PrinterJob job=PrinterJob.getPrinterJob();
										PrintPanel canvas=new PrintPanel();
										if(job.printDialog(atrb))
										{
										*/
										//no of pages
							 			/*Datab1aseFile dbfile=new Datab1aseFile();
										Connection con=dbfile.connectDatab1ase();
										Statement st=con.createStatement();
										Statement st1=con.createStatement();
										*/
										System.out.println("W="+paper.getWidth()+"H="+paper.getHeight());
										//printJob.print();
										
									//for(int d=1;d<=noOfCopies;d++)
	                           		//{
										//totalamt=new BigDecimal("0.00");
										
										
										
										
										
													int totalrec=tab1.getRowCount();
														if(tab1.getRowCount()<=33)
														{
															totalpg=tab1.getRowCount()/33;
															rem=tab1.getRowCount()%33;
														}
														if(tab1.getRowCount()>33)
														{
															totalpg=1+((tab1.getRowCount()-33)/38);
															rem=(tab1.getRowCount()-33)%38;
														}
														
									    				System.out.println("rem....more="+rem);
											
											
														System.out.println("dhananaja tiwari before="+totalpg);
														if(rem>0)
															totalpg++;
															currentpg=totalpg;	
										
														System.out.println("dhananaja tiwari after="+totalpg);
														firsttime=false;
														if(totalpg==1)
														{
																endno=totalrec;
                            		    						startno=1;
                            		    						
                            				
                            									firsttime=false;
                            									printJob.print();
                            									//currentpg--;	
                            									
														}
														else
														{
														
														for(int i=totalpg;i>=1;i--)	
                            		    				{
                            		    						if(totalpg==i)
                            		    						{
                            		    							startno=(totalrec-rem)+1;
                            		    							endno=totalrec;
                            		    						}
                            		    						else if(currentpg==1)
                            		    						{
                            		    							endno=startno-1;
                            		    							startno=1;
                            		    						}
                            		    						else
                            		    						{
                            		    							endno=startno-1;
                            		    							startno=(endno-38)+1;                            		    							
                            		    						}
                            				
                            									firsttime=false;
                            									printJob.print();
                            									currentpg--;	
                            									//startno=endno;
                            									//endno=startno+38;
                            							}
                            							}
														/*for(int i=1;i<=totalpg;i++)	
                            		    				{
                            									System.out.println("i="+i);
                            									if(i==1)
                            									{
                            										startno=(i-1)*33;
                            				    				    endno=startno+33;	
                            									
                            									}		
                            				                    if(i==2)
                            				                    {
                            				                    	startno=(i-1)*33;
                            				    				    endno=startno+38;	
                            				                    }
                            											
                            			    					if(endno>(grid.getRowCount()-1))
                            									endno=grid.getRowCount();
                            					
                            									currentpg++;	
                            				
                            									firsttime=false;
                            									printJob.print();
                            									startno=endno;
                            									endno=startno+38;
                            							}*/
										
										
										
											
										
										
										
										
									//}
	                            }
                                catch(Exception exception)
                                {
                                        JOptionPane.showMessageDialog(this,exception);
                                }
        		}
	}
	class PrintPanel extends JPanel implements Printable
	{
        //Connection connection;
        //Statement st,st1;
        //ResultSet rs,rs1;
        int page=100;
		TextLayout layout;
		Font f,f1,f2,f3,f4,f5,f6;
		Graphics2D g2;
		int row=0;		
		FontRenderContext context;
        
        
        public PrintPanel()
        {
                //ChallanNo=JOptionPane.showInputDialog(null,"Enter Challan Number:");
        }
        public void paintComponent(Graphics g)
        {
                super.paintComponent(g);
                Graphics2D g2=(Graphics2D)g;
                drawPage(g2);
        }

        public int print(Graphics g,PageFormat pf,int page) throws PrinterException
        {
                if(page>=1)
                        return Printable.NO_SUCH_PAGE;
                Graphics2D g2=(Graphics2D)g;
                g2.setPaint(Color.black);
                g2.translate(pf.getImageableX(),pf.getImageableY());
                //g2.draw(new Rectangle2D.Double(0,0,pf.getImageableWidth(),pf.getImageableHeight()));
                System.out.println("W1="+pf.getImageableWidth()+"H1="+pf.getImageableHeight());
                drawPage(g2);
                return Printable.PAGE_EXISTS;
        }
        public void drawPage(Graphics2D g2)
        {
			this.g2=g2;
			//System.out.println("inside draw page..."+totalamt);	
			
            context=g2.getFontRenderContext();
            f1=new Font("Times New Roman",Font.BOLD,10);
            //f1=new Font("Arial",Font.BOLD,120);
            f2=new Font("Arial",Font.PLAIN,9);
            f3=new Font("Arial",Font.PLAIN,10);
            f4=new Font("Arial",Font.BOLD,10);
            f5=new Font("Times New Roman",Font.PLAIN,11);
            f6=new Font("Times New Roman",Font.BOLD,11);
            Font f7=new Font("Times New Roman",Font.BOLD,12);
            Font f8=new Font("Times New Roman",Font.BOLD,25);
            FontMetrics fm;
            GeneralPath clipShape=new GeneralPath();

            String str=" fdfg dfg dfg";
            String str1="d fgf dgdfg df";                                        
            g2.setFont(f1);
            layout=new TextLayout(str,f1,context);
            AffineTransform transform=AffineTransform.getTranslateInstance(10,20);
			
			if(firsttime==false)
			{
				firsttime=true;
			}
			else
			{			
		        try
        		{
        			System.out.println("dhananjay.............1");
        			
        			
        			
		        	/*FinDatab1aseFile dbfile1=new FinDatab1aseFile();
					Connection con1=dbfile1.connectDatab1ase();
					Statement st=con1.createStatement();								
					con1.close();*/
					
					System.out.println("dhananjay.............2");
					
					/*Datab1aseFile confile=new Datab1aseFile();
					Connection connection=confile.connectDatab1ase();
					Statement stobj=connection.createStatement();
					stobj.close();
					connection.close();								
					System.out.println("dhananjay.............3");*/
					
					fm=g2.getFontMetrics();				
					String temp="";
		            int top=40;
		            
		            if(currentpg==1)
		            {
		            
						System.out.println("s......");

		            
		            
		            g2.setFont(f6);
		            java.util.Date dt=new java.util.Date();
		            fm=g2.getFontMetrics();				
		            temp="Out of stock on dated :" +dt.getDate()+"/"+(dt.getMonth()+1)+"/"+(dt.getYear()+1900);
		            layout=new TextLayout(temp,f6,context);
        		    g2.drawString(temp,(595-fm.stringWidth(temp))/2,top);
        		    
		            top+=20;
		            g2.setFont(f8);
		            fm=g2.getFontMetrics();
                            System.out.println(SetDBFileName.firmNameForDBSelection);
                            //String firm[]=SetDBFileName.firmNameForDBSelection.split("."); 
                            String firm=SetDBFileName.firmNameForDBSelection.substring(0,SetDBFileName.firmNameForDBSelection.indexOf("."));
		            temp=firm.toUpperCase();
		            layout=new TextLayout(temp,f8,context);
        		    g2.drawString(temp,(595-fm.stringWidth(temp))/2,top);
					
                                        top+=10;
					g2.setFont(f1);
                                        
		            temp="Sr. No.";
		            layout=new TextLayout(temp,f1,context);
        		    g2.drawString(temp,35,top);
        		    
        		    temp="Company Name";
		            layout=new TextLayout(temp,f1,context);
        		    g2.drawString(temp,155,top)	;

		            
                            
                            temp="Item Name";
		            layout=new TextLayout(temp,f1,context);
        		    g2.drawString(temp,395,top)	;

                            }
					
					top+=7;
					g2.setFont(f6);
					//layout=new TextLayout("------------------------------------------------------------------------------------------------------------------------------------------------------------------",f6,context);
        			//g2.drawString("------------------------------------------------------------------------------------------------------------------------------------------------------------------",0,top);
					g2.drawLine(10,top,575,top);
					
					g2.setFont(f3);
		            for(int i=startno-1;i<endno;i++)
					{
						top+=12;
			            fm=g2.getFontMetrics();				
			            temp=""+tab1.getValueAt(i,0);
			            layout=new TextLayout(temp,f1,context);
        			    g2.drawString(temp,(70-fm.stringWidth(temp)),top);
	
			           
			            
			            temp=""+tab1.getValueAt(i,1);
			            temp=temp.toUpperCase();
			            layout=new TextLayout(temp,f1,context);
        			    g2.drawString(temp,150,top);

					                                   
                                    temp=""+tab1.getValueAt(i,2);
			            temp=temp.toUpperCase();
			            layout=new TextLayout(temp,f1,context);
        			    g2.drawString(temp,370,top);

			           /*temp=""+tab11.getValueAt(i,4);			            
			            layout=new TextLayout(temp,f1,context);
        			    g2.drawString(temp,(550-fm.stringWidth(temp)),top);*/
        			    
        			  top+=5;
			            g2.drawLine(10,top,575,top);
					}

					top=720;
					g2.setFont(f6);
					//layout=new TextLayout("------------------------------------------------------------------------------------------------------------------------------------------------------------------",f6,context);
        			//g2.drawString("------------------------------------------------------------------------------------------------------------------------------------------------------------------",0,top);
					g2.drawLine(10,top,575,top);
					
					
					top+=10;
					g2.setFont(f6);
					if(totalpg>1 && currentpg!=totalpg)
					{
						temp="Continue...";	
			            layout=new TextLayout(temp,f1,context);
       				    g2.drawString(temp,480,top);        				    
					}
						temp="("+currentpg+"/"+totalpg+")";
						fm=g2.getFontMetrics();				
			            layout=new TextLayout(temp,f6,context);
       				    g2.drawString(temp,(575-fm.stringWidth(temp))/2,top);
       				   
					
         		}
         		catch(Exception x)
         		{
	        		System.out.println("Error2193821..."+x);
         		}
         
         	}
      	}
	}
}
